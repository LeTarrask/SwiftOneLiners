/// Largest Palindrome Product
func largestPalindromProduct(digitSize: Int) -> Int {
	{ context in return { value, _ in return value.highest }({ _ in context.move() }({ while "\(context.pointee.lhs * context.pointee.rhs)" != String("\(context.pointee.lhs * context.pointee.rhs)".reversed()) || context.pointee.lhs * context.pointee.max > context.pointee.highest { { a, b, c, d, e in context.pointee = (a, b, "\(context.pointee.lhs * context.pointee.rhs)" == String("\(context.pointee.lhs * context.pointee.rhs)".reversed()) && context.pointee.lhs * context.pointee.rhs > c ? context.pointee.lhs * context.pointee.rhs : c, d, e) }(context.pointee.rhs == context.pointee.min ? context.pointee.lhs - 1 : context.pointee.lhs, context.pointee.rhs > context.pointee.min ? context.pointee.rhs - 1 : Int((0..<digitSize).map({ _ in "9" }).joined())!, context.pointee.highest, context.pointee.max, context.pointee.min) } }()), context.deallocate()) }({ context in return { _ in context }(context.initialize(to: (Int((0..<digitSize).map({ _ in "9" }).joined())!, Int((0..<digitSize).map({ _ in "9" }).joined())!, 0, Int((0..<digitSize).map({ _ in "9" }).joined())!, Int("1" + (0..<digitSize-1).map({ _ in "0" }).joined())!))) }(UnsafeMutablePointer<(lhs: Int, rhs: Int, highest: Int, max: Int, min: Int)>.allocate(capacity: 1)))
}

print(largestPalindromProduct(digitSize: 3))
